---
- name: Hardware Configuration
  notify: Reboot
  block:
    - name: Raspberry Pi Configuration
      when: cluster_vars.hardware.product == 'Raspberry Pi'
      block:
        - name: Set service facts
          ansible.builtin.service_facts:

        - name: Bluetooth Configuration
          when: not cluster_vars.service.bluetooth.enabled
          block:
            - name: Disable bluetooth service
              ansible.builtin.systemd_service:
                name: bluetooth.service
                state: stopped
                enabled: false
              when: ansible_facts.services['bluetooth.service'] is defined

            - name: Disable hciuart service
              ansible.builtin.systemd_service:
                name: hciuart.service
                state: stopped
                enabled: false
              when: ansible_facts.services['hciuart.service'] is defined

        - name: WiFi Configuration
          when: not cluster_vars.service.wifi.enabled
          block:
            - name: Disable wifi service
              ansible.builtin.systemd_service:
                name: wpa_supplicant.service
                state: stopped
                enabled: false
              when: ansible_facts.services['wpa_supplicant.service'] is defined

        - name: Create firmware purge configuration
          ansible.builtin.copy:
            content: "DPkg::Post-Invoke {\"/usr/bin/find /boot/firmware -type f -name '*.bak' -delete 2>/dev/null || true\";};\n"
            dest: /etc/apt/apt.conf.d/90rpi-firmware-purge
            owner: root
            group: root
            mode: '0644'

        - name: Enable cpuset and memory cgroups
          ansible.builtin.lineinfile:
            path: /boot/firmware/cmdline.txt
            regexp: ^((?!.+\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).+)$
            line: \g<1> cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
            backrefs: true

    - name: USB Device Configuration
      when: cluster_vars.device.transport == 'usb'
      block:
        - name: Set device id
          ansible.builtin.command:
            cmd: lsusb -s {{ cluster_vars.device.id }}
          changed_when: false
          register: device_id

        - name: Device Trim
          when: device_id.stdout.find(cluster_vars.device.name) != -1
          block:
            - name: Set device attributes fact
              ansible.builtin.set_fact:
                device_attributes: "{{ device_id.stdout | regex_search('ID\\s+(.*)\\s+' + cluster_vars.device.name, '\\1') | join | trim | split(':') }}"

            - name: Device Rule Setup
              when:
                - device_attributes is iterable
                - device_attributes | length == 2
              block:
                - name: Set device rule fact
                  ansible.builtin.set_fact:
                    device_rule:
                      - ACTION=="add|change"
                      - ATTRS{idVendor}=="{{ device_attributes[0] }}"
                      - ATTRS{idProduct}=="{{ device_attributes[1] }}"
                      - SUBSYSTEM=="scsi_disk"
                      - ATTR{provisioning_mode}="unmap"

                - name: Create device rule
                  ansible.builtin.lineinfile:
                    path: /etc/udev/rules.d/10-unmap.fstrim.rules
                    line: "{{ device_rule | join(', ') }}"
                    regexp: ^ACTION
                    owner: root
                    group: root
                    mode: '0644'
                    create: true

                - name: Start fstrim.timer
                  ansible.builtin.systemd_service:
                    name: fstrim.timer
                    state: started
                    enabled: true

            - name: Trim device
              ansible.builtin.command:
                cmd: fstrim -v /
              changed_when: command.stdout.find('trimmed') != -1
              register: command
              when: prompt_trim_device in ['y', 'Y']

- name: OS Configuration
  block:
    - name: Get host fqdn
      ansible.builtin.command:
        cmd: hostname --fqdn
      changed_when: false
      register: host_fqdn

    - name: Get host all fqdns
      ansible.builtin.command:
        cmd: hostname --all-fqdns
      changed_when: false
      register: host_all_fqdns

    - name: Set cluster host fact
      ansible.builtin.set_fact:
        cluster_host:
          extension: "{{ host_all_fqdns.stdout | split | first | split('.') | last | default('local') }}"
          fqdn: '{{ host_all_fqdns.stdout | split | first }}'
          ipv4: "{{ ansible_default_ipv4['address'] }}"
          name: '{{ ansible_host }}'

    - name: Set host fqdn
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: ^127.0.1.1\s.+\s{{ cluster_host['name'] }}$
        replace: 127.0.1.1 {{ cluster_host['fqdn'] }} {{ cluster_host['name'] }}
      notify: Reboot
      when: host_fqdn.stdout != cluster_host['fqdn']

    - name: Set root full name
      ansible.builtin.command:
        cmd: chfn -f "{{ cluster_host['name'] }}" root
      changed_when: false

    - name: Disable access time updates
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: defaults\t0
        replace: defaults,noatime\t0
      notify: Reboot

    - name: Disable cloud-init service
      ansible.builtin.file:
        path: /etc/cloud/cloud-init.disabled
        access_time: preserve
        modification_time: preserve
        state: touch
        owner: root
        group: root
        mode: '0644'
      notify: Reboot
      when: not cluster_vars.service.cloud_init.enabled

    - name: Disable firewall service
      ansible.builtin.systemd_service:
        name: ufw.service
        state: stopped
        enabled: false

    - name: Disable snapd services
      ansible.builtin.systemd_service:
        name: '{{ item }}'
        state: stopped
        enabled: false
      loop:
        - snapd.apparmor.service
        - snapd.service
        - snapd.seeded.service
        - snapd.socket
      when: not cluster_vars.service.snapd.enabled

    - name: Unattended Upgrades
      notify: Restart unattended upgrades service
      when: cluster_vars.service.unattended_upgrades.enabled
      block:
        - name: Install history notification package
          ansible.builtin.apt:
            name: apt-listchanges
            autoremove: true
            update_cache: true

        - name: Update unattended upgrades configuration
          ansible.builtin.replace:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
            regexp: '{{ item.regexp }}'
            replace: '{{ item.replace }}'
          loop:
            - regexp: ^(?:.*)(\"\${distro_id}:\${distro_codename}-updates\";)$
              replace: \t\g<1>
            - regexp: ^(?:.*)(Unattended-Upgrade::Mail)\s.*;$
              replace: '\g<1> {{ lookup(community.general.onepassword, ansible-secrets, field=default_email, vault=homelab_private) }} }};'
            - regexp: ^(?:.*)(Unattended-Upgrade::MailReport)\s.*;$
              replace: '\g<1> "{{ cluster_vars.service.unattended_upgrades.mail_report }}";'
            - regexp: ^(?:.*)(Unattended-Upgrade::Remove-Unused-Dependencies)\s.*;$
              replace: '\g<1> "{{ cluster_vars.service.unattended_upgrades.remove_deps }}";'
